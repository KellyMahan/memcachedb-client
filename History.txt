= 1.1.4

  get_range(key1, key2, start_exclude=0, end_exclude=0, limit=100)
  
  to exclude the first or last search term use 1

= 1.1.3

  updated gem, removed depedencies

= 1.1.2

merged changes from memcache-client VERSION = '1.6.5'

* Change memcache-client to multithreaded by default.  The mutex does not add significant
  overhead and it is far too easy, now that Sinatra, Rails and Merb are all thread-safe, to
  use memcache-client in a thread-unsafe manner.  Remove some unnecessary mutexing and add
  a test to verify heavily multithreaded usage does not act unexpectedly.


* Add optional support for the SystemTimer gem when running on Ruby 1.8.x.  This gem is
  highly recommended - it ensures timeouts actually work and halves the overhead of using
  timeouts.  Using this gem, Ruby 1.8.x is actually faster in my performance tests
  than Ruby 1.9.x.  Just "gem install SystemTimer" and it should be picked up automatically.

= 1.6.4 (2009-02-19)

* Remove native code altogether.  The speedup was only 10% on Ruby 1.8.6 and did not work
  on Ruby 1.9.1.

* Removed memcache_util.rb from the distribution.  If you are using it, please copy the code
  into your own project.  The file will live in the github repository for a few more months
  for this purposes. http://github.com/mperham/memcache-client/raw/7a276089aa3c914e47e3960f9740ac7377204970/lib/memcache_util.rb

* Roll continuum.rb into memcache.rb.  The project is again a single Ruby file, with no dependencies.


= 1.1.1

  merged changes from memcache-client 1.6.4
  
  "Add runtime check for unsafe multithreaded usage, to ward off bug reports."

= 1.1

added get_range method.

example:
  
  CACHE.get_range(:a, :z, limit)

  this will return all records between and including a through z with a limit on the records. The max is 100
  
= 1.0

derived from memcache-client 1.6.3 http://github.com/mperham for use with memcachedb